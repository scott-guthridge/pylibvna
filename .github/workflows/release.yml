name: Make Release
on:
  push:
    tags: [ "v[0-9]*" ]

jobs:
  build_wheels:
    name: Build wheel for ${{matrix.python.cp}}-${{matrix.buildplat.sys}}
          ${{matrix.buildplat.arch}}
    runs-on: ${{ matrix.buildplat.runs_on }}
    strategy:
      matrix:
        buildplat:
        - { runs_on: ubuntu-22.04, sys: manylinux, arch: x86_64, benv: "" }
        - { runs_on: macos-12,     sys: macosx,    arch: x86_64, benv: "10.13" }
        - { runs_on: macos-14,     sys: macosx,    arch: arm64,  benv: "12.3" }
        - { runs_on: windows-2019, sys: win,       arch: AMD64,  benv: "" }
        python:
        - { cp: "cp310",  rel: "3.10" }
        - { cp: "cp311",  rel: "3.11" }
        - { cp: "cp312",  rel: "3.12" }
        - { cp: "cp313",  rel: "3.13" }
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4.1.1

    - uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Install Python Packages
      run: |
        python -m pip install --upgrade pip
        pip install cibuildwheel requests

    # Move these into CIBW before in pyproject.toml
    - name: Install Pkg-Config (Windows)
      if: ${{ runner.os == 'Windows' }}
      run: |
        choco install pkgconfiglite

    - name: Install Libvna (Windows)
      if: ${{ runner.os == 'Windows' }}
      shell: powershell
      run:
        $ErrorActionPreference = "Stop";
        python3 tools/install-libvna-windows-native.py -A=no 'C:\opt\libvna'

    - name: Build Wheels (MacOS)
      if: ${{ runner.os == 'macOS' }}
      env:
        CIBW_BUILD: ${{ matrix.python.cp }}-${{ matrix.buildplat.sys }}*
        CIBW_ARCHS: ${{ matrix.buildplat.arch }}
        # Setting CIBW_ENVIRONMENT overrides the environment settings in
        # pyproject.toml and would break the Windows build.  Ideally, we'd
        # set all of them there, but don't know how to pass "benv".
        CIBW_ENVIRONMENT: "MACOSX_DEPLOYMENT_TARGET=${{ matrix.buildplat.benv }}"
        AUTH_TOKEN: ${{ github.token }}
      run: python -m cibuildwheel --output-dir wheelhouse

    - name: Build Wheels (not MacOS)
      if: ${{ runner.os != 'macOS' }}
      env:
        CIBW_BUILD: ${{ matrix.python.cp }}-${{ matrix.buildplat.sys }}*
        CIBW_ARCHS: ${{ matrix.buildplat.arch }}
      run: python -m cibuildwheel --output-dir wheelhouse

    # To use, uncomment this + `config-settings = "build-dir=build"`
    # and disable build isolation in pyproject.toml
    #
    # - name: Get Meson Log
    #   shell: bash
    #   if: always()
    #   run: |
    #     cat build/meson-logs/meson-log.txt

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{matrix.python.cp}}-${{matrix.buildplat.sys}}-${{matrix.buildplat.arch}}
        path: wheelhouse/*

  publish:
    name: Publish to PyPI
    needs: build_wheels
    runs-on: ubuntu-latest
    steps:
    - name: Install Python Packages
      run: |
        pip install twine
    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        merge-multiple: true
    - name: Publish to PyPI
      run: |
        python -m twine upload artifacts/*.whl
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

  # make_release:
  #   name: Make Release
  #   needs: build_wheels
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Download Artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       path: artifacts
  #       merge-multiple: true
  #   - name: Create Release
  #     uses: actions/create-release@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       tag_name: ${{ github.ref }}
  #       release_name: Release ${{ github.ref }}
  #       draft: false
  #       prerelease: false
  #   - name: List Release Assets
  #     run: |
  #       find artifacts -ls
  #   - name: Upload Release Assets
  #     uses: alexellis/upload-assets@0.4.1
  #     env:
  #       GITHUB_TOKEN: ${{ github.token }}
  #     with:
  #       asset_paths: '["artifacts/**/*"]'
